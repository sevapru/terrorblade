$ semgrep ci   
/home/seva/code/terrorblade/.venv/lib/python3.13/site-packages/opentelemetry/instrumentation/dependencies.py:4: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.
  from pkg_resources import (
                  
                  
┌────────────────┐
│ Debugging Info │
└────────────────┘
                  
  SCAN ENVIRONMENT
  versions    - semgrep 1.130.0 on python 3.13.5                       
  environment - running in environment git, triggering event is unknown
            
  CONNECTION
  Initializing scan (deployment=sevapru-personal-org, scan_id=83530070)  
  Enabled products: Code, Supply Chain                                                                                                                                                           
        
        
  ENGINE
  Using Semgrep Pro Version: 1.130.0
  Installed at /home/seva/code/terrorblade/.venv/lib/python3.13/site-packages/semgrep/bin/semgrep-core-proprietary
                                                                                                                        
                                                                                                                        
  Scanning 59 files (only git-tracked) with 2453 Code rules, 3794 Supply Chain rules:
            
  CODE RULES
                                                                                                                        
  Language      Rules   Files          Origin      Rules                                                                
 ─────────────────────────────        ───────────────────                                                               
  <multilang>      48      59          Pro rules    1390                                                                
  python          879      23          Community    1063                                                                
  bash              4       4                                                                                           
  yaml             31       2                                                                                           
  dockerfile        6       1                                                                                           
                                                                                                                        
                    
  SUPPLY CHAIN RULES
                                                                                                                        
  Dependency Sources                                              Resolution Method   Ecosystem   Dependencies   Rules  
 ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 
  requirements-cuda.txt, requirements-dev.txt, requirements.txt   Lockfile            Pypi        343             3794  
  reports/requirements-freeze.txt                                 Skipped             Unknown     -                  -  
                                                                                                                        
                                                                                                                        
  Analysis       Rules                                                                                                  
 ──────────────────────                                                                                                 
  Basic           3207                                                                                                  
  Reachability     587                                                                                                  
                                                                                                                        
          
  PROGRESS
   
Semgrep Pro Engine may be slower and show different results than Semgrep OSS.
  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸━━  95% 0:02:51                                                                                                                        
  Uploading scan results  
  Finalizing scan                                                                                                                                 
                                        
                                        
┌──────────────────────────────────────┐
│ 3 Undetermined Supply Chain Findings │
└──────────────────────────────────────┘
                                        
    requirements-cuda.txt
    ❯❱ torch - CVE-2025-3730
          Severity: MODERATE                                                       
          Affected versions of torch are vulnerable to Improper Resource Shutdown or Release.
                                                                                             
           ▶▶┆ Fixed for torch at version: 
          336┆ torch==2.7.1
                                       
    requirements-dev.txt
    ❯❱ torch - CVE-2025-3730
          Severity: MODERATE                                                       
          Affected versions of torch are vulnerable to Improper Resource Shutdown or Release.
                                                                                             
           ▶▶┆ Fixed for torch at version: 
          562┆ torch==2.7.1
                                   
    requirements.txt
    ❯❱ torch - CVE-2025-3730
          Severity: MODERATE                                                       
          Affected versions of torch are vulnerable to Improper Resource Shutdown or Release.
                                                                                             
           ▶▶┆ Fixed for torch at version: 
          219┆ torch==2.7.1
                                 
                                 
┌───────────────────────────────┐
│ 47 Non-blocking Code Findings │
└───────────────────────────────┘
                             
    Dockerfile
   ❯❯❱ dockerfile.security.missing-user.missing-user
          By not specifying a USER, a program in the container may run as 'root'. This is a security hazard.
          If an attacker can control a process running as root, they may have control over the container.   
          Ensure that the last USER in a Dockerfile is a USER other than 'root'.                            
          Details: https://sg.run/Gbvn                                                                      
                                                                                                            
           ▶▶┆ Autofix ▶ USER non-root CMD ["python3", "-m", "debugpy", "--listen", "0.0.0.0:5678", "-m",
              "terrorblade.main"]                                                                        
           42┆ USER non-rootCMD ["python3", "-m", "debugpy", "--listen", "0.0.0.0:5678", "-m",
               "terrorblade.main"]                                                            
            ⋮┆----------------------------------------
           ▶▶┆ Autofix ▶ USER non-root CMD ["python3", "-m", "terrorblade.main"]
           57┆ USER non-rootCMD ["python3", "-m", "terrorblade.main"]
            ⋮┆----------------------------------------
           ▶▶┆ Autofix ▶ USER non-root CMD ["echo", "Thoth container started. Implement Thoth entrypoint."]
           72┆ USER non-rootCMD ["echo", "Thoth container started. Implement Thoth entrypoint."]
                                                                 
    terrorblade/data/database/telegram_database.py
    ❯❱ python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          101┆ result = self.db.execute(
          102┆     f"""
          103┆     SELECT MIN(date) FROM {table}
          104┆ """
          105┆ ).fetchone()
   
   ❯❯❱ python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          101┆ result = self.db.execute(
          102┆     f"""
          103┆     SELECT MIN(date) FROM {table}
          104┆ """
          105┆ ).fetchone()
   
    ❯❱ python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          208┆ total_messages = self.db.execute(
          209┆     f"""
          210┆     SELECT COUNT(*) FROM {messages_table}
          211┆ """
          212┆ ).fetchone()
   
   ❯❯❱ python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          208┆ total_messages = self.db.execute(
          209┆     f"""
          210┆     SELECT COUNT(*) FROM {messages_table}
          211┆ """
          212┆ ).fetchone()
   
    ❯❱ python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          217┆ chat_stats = self.db.execute(
          218┆     f"""
          219┆     SELECT
          220┆         chat_id,
          221┆         chat_name,
          222┆         COUNT(*) as message_count
          223┆     FROM {messages_table}
          224┆     GROUP BY chat_id, chat_name
          225┆     ORDER BY message_count DESC
          226┆ """
             [hid 1 additional lines, adjust with --max-lines-per-finding] 
   
   ❯❯❱ python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          217┆ chat_stats = self.db.execute(
          218┆     f"""
          219┆     SELECT
          220┆         chat_id,
          221┆         chat_name,
          222┆         COUNT(*) as message_count
          223┆     FROM {messages_table}
          224┆     GROUP BY chat_id, chat_name
          225┆     ORDER BY message_count DESC
          226┆ """
             [hid 1 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          234┆ largest_cluster = self.db.execute(
          235┆     f"""
          236┆     SELECT
          237┆         m.chat_id,
          238┆         m.chat_name,
          239┆         COUNT(*) as cluster_size
          240┆     FROM {clusters_table} c
          241┆     JOIN {messages_table} m ON c.message_id = m.message_id
          242┆     GROUP BY c.group_id, m.chat_id, m.chat_name
          243┆     ORDER BY cluster_size DESC
             [hid 3 additional lines, adjust with --max-lines-per-finding] 
   
   ❯❯❱ python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          234┆ largest_cluster = self.db.execute(
          235┆     f"""
          236┆     SELECT
          237┆         m.chat_id,
          238┆         m.chat_name,
          239┆         COUNT(*) as cluster_size
          240┆     FROM {clusters_table} c
          241┆     JOIN {messages_table} m ON c.message_id = m.message_id
          242┆     GROUP BY c.group_id, m.chat_id, m.chat_name
          243┆     ORDER BY cluster_size DESC
             [hid 3 additional lines, adjust with --max-lines-per-finding] 
          256┆ cluster_stats = self.db.execute(
          257┆     f"""
          258┆     SELECT
          259┆         COUNT(DISTINCT c.group_id) as cluster_count,
          260┆         AVG(cluster_size) as avg_size,
          261┆         MAX(cluster_size) as max_size
          262┆     FROM (
          263┆         SELECT group_id, COUNT(*) as cluster_size
          264┆         FROM {clusters_table}
          265┆         WHERE chat_id = ?
             [hid 5 additional lines, adjust with --max-lines-per-finding] 
          313┆ large_clusters = self.db.execute(
          314┆     f"""
          315┆     WITH cluster_sizes AS (
          316┆         SELECT
          317┆             group_id,
          318┆             chat_id,
          319┆             COUNT(*) as size
          320┆         FROM {clusters_table}
          321┆         GROUP BY group_id, chat_id
          322┆         HAVING COUNT(*) >= ?
             [hid 9 additional lines, adjust with --max-lines-per-finding] 
          373┆ chat_info = self.db.execute(
          374┆     f"""
          375┆     SELECT
          376┆         chat_id,
          377┆         chat_name,
          378┆         COUNT(*) as message_count
          379┆     FROM {messages_table}
          380┆     WHERE chat_id = ?
          381┆     GROUP BY chat_id, chat_name
          382┆ """,
             [hid 2 additional lines, adjust with --max-lines-per-finding] 
          390┆ cluster_stats = self.db.execute(
          391┆     f"""
          392┆     SELECT
          393┆         COUNT(DISTINCT c.group_id) as cluster_count,
          394┆         AVG(cluster_size) as avg_size,
          395┆         MAX(cluster_size) as max_size
          396┆     FROM (
          397┆         SELECT group_id, COUNT(*) as cluster_size
          398┆         FROM {clusters_table}
          399┆         WHERE chat_id = ?
             [hid 5 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          432┆ self.db.execute(
          433┆     f"""
          434┆     CREATE TABLE IF NOT EXISTS {messages_table} (
          435┆     {", ".join(columns)},
          436┆     PRIMARY KEY (message_id, chat_id)
          437┆ )
          438┆ """
          439┆ )
   
   ❯❯❱ python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          432┆ self.db.execute(
          433┆     f"""
          434┆     CREATE TABLE IF NOT EXISTS {messages_table} (
          435┆     {", ".join(columns)},
          436┆     PRIMARY KEY (message_id, chat_id)
          437┆ )
          438┆ """
          439┆ )
   
    ❯❱ python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          475┆ self.db.execute(
          476┆     f"""INSERT OR IGNORE INTO {messages_table} ({', '.join(list(TELEGRAM_SCHEMA.keys()))})
               SELECT {', '.join(list(TELEGRAM_SCHEMA.keys()))} FROM messages_df"""                      
          477┆ )
   
   ❯❯❱ python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          475┆ self.db.execute(
          476┆     f"""INSERT OR IGNORE INTO {messages_table} ({', '.join(list(TELEGRAM_SCHEMA.keys()))})
               SELECT {', '.join(list(TELEGRAM_SCHEMA.keys()))} FROM messages_df"""                      
          477┆ )
   
    ❯❱ python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          479┆ first_seen = self.db.execute(
          480┆     f"""
          481┆     SELECT MIN(date) FROM {messages_table}
          482┆     """
          483┆ ).fetchone()
   
   ❯❯❱ python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          479┆ first_seen = self.db.execute(
          480┆     f"""
          481┆     SELECT MIN(date) FROM {messages_table}
          482┆     """
          483┆ ).fetchone()
   
    ❯❱ python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          515┆ largest_cluster = self.db.execute(
          516┆     f"""
          517┆     WITH cluster_sizes AS (
          518┆         SELECT
          519┆             group_id,
          520┆             chat_id,
          521┆             COUNT(*) as size
          522┆         FROM {clusters_table}
          523┆         GROUP BY group_id, chat_id
          524┆     )
             [hid 9 additional lines, adjust with --max-lines-per-finding] 
   
   ❯❯❱ python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          515┆ largest_cluster = self.db.execute(
          516┆     f"""
          517┆     WITH cluster_sizes AS (
          518┆         SELECT
          519┆             group_id,
          520┆             chat_id,
          521┆             COUNT(*) as size
          522┆         FROM {clusters_table}
          523┆         GROUP BY group_id, chat_id
          524┆     )
             [hid 9 additional lines, adjust with --max-lines-per-finding] 
          650┆ result = self.db.execute(
          651┆     f"""
          652┆     SELECT MAX(message_id) FROM {messages_table}
          653┆     WHERE chat_id = ?
          654┆     """,
          655┆     [chat_id],
          656┆ ).fetchone()
                                                                         
    terrorblade/data/preprocessing/TelegramPreprocessor.py
    ❯❱ python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           67┆ self.db.execute(
           68┆     f"""
           69┆     CREATE TABLE IF NOT EXISTS {clusters_table} (
           70┆         message_id BIGINT,
           71┆         chat_id BIGINT,
           72┆         group_id INTEGER,
           73┆         PRIMARY KEY (message_id, chat_id)
           74┆     )
           75┆ """
           76┆ )
   
   ❯❯❱ python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           67┆ self.db.execute(
           68┆     f"""
           69┆     CREATE TABLE IF NOT EXISTS {clusters_table} (
           70┆         message_id BIGINT,
           71┆         chat_id BIGINT,
           72┆         group_id INTEGER,
           73┆         PRIMARY KEY (message_id, chat_id)
           74┆     )
           75┆ """
           76┆ )
   
    ❯❱ python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           78┆ self.db.execute(
           79┆     f"""
           80┆     CREATE TABLE IF NOT EXISTS {embeddings_table} (
           81┆         message_id BIGINT,
           82┆         chat_id BIGINT,
           83┆         embeddings DOUBLE[],
           84┆         PRIMARY KEY (message_id, chat_id)
           85┆     )
           86┆ """
           87┆ )
   
   ❯❯❱ python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           78┆ self.db.execute(
           79┆     f"""
           80┆     CREATE TABLE IF NOT EXISTS {embeddings_table} (
           81┆         message_id BIGINT,
           82┆         chat_id BIGINT,
           83┆         embeddings DOUBLE[],
           84┆         PRIMARY KEY (message_id, chat_id)
           85┆     )
           86┆ """
           87┆ )
   
    ❯❱ python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          116┆ result = self.db.execute(query).arrow()
   
   ❯❯❱ python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          116┆ result = self.db.execute(query).arrow()
   
    ❯❱ python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          142┆ self.db.execute(
          143┆     f"""
          144┆     INSERT OR IGNORE INTO {clusters_table}
          145┆     (message_id, chat_id, group_id)
          146┆     SELECT message_id, chat_id, group_id
          147┆     FROM clusters_df
          148┆     """
          149┆ )
   
   ❯❯❱ python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          142┆ self.db.execute(
          143┆     f"""
          144┆     INSERT OR IGNORE INTO {clusters_table}
          145┆     (message_id, chat_id, group_id)
          146┆     SELECT message_id, chat_id, group_id
          147┆     FROM clusters_df
          148┆     """
          149┆ )
   
    ❯❱ python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          170┆ self.db.execute(
          171┆     f"""
          172┆     INSERT OR IGNORE INTO {embeddings_table}
          173┆     (message_id, chat_id, embeddings)
          174┆     SELECT message_id, chat_id, embeddings
          175┆     FROM embeddings_df
          176┆     """
          177┆ )
   
   ❯❯❱ python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          170┆ self.db.execute(
          171┆     f"""
          172┆     INSERT OR IGNORE INTO {embeddings_table}
          173┆     (message_id, chat_id, embeddings)
          174┆     SELECT message_id, chat_id, embeddings
          175┆     FROM embeddings_df
          176┆     """
          177┆ )
            ⋮┆----------------------------------------
          205┆ result = self.db.execute(query, [chat_id]).fetchall()
   
    ❯❱ python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          234┆ result = self.db.execute(query).fetchall()
   
   ❯❯❱ python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          234┆ result = self.db.execute(query).fetchall()
   
    ❯❱ python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          730┆ self.db.execute(
          731┆     f"""INSERT OR IGNORE INTO {messages_table} ({', '.join(column_names)}) SELECT {',
               '.join(column_names)} FROM messages_df"""                                            
          732┆ )
   
   ❯❯❱ python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          730┆ self.db.execute(
          731┆     f"""INSERT OR IGNORE INTO {messages_table} ({', '.join(column_names)}) SELECT {',
               '.join(column_names)} FROM messages_df"""                                            
          732┆ )
   
    ❯❱ python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          734┆ first_seen = self.db.execute(
          735┆     f"""
          736┆     SELECT MIN(date) FROM {messages_table}
          737┆     """
          738┆ ).fetchone()
   
   ❯❯❱ python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          734┆ first_seen = self.db.execute(
          735┆     f"""
          736┆     SELECT MIN(date) FROM {messages_table}
          737┆     """
          738┆ ).fetchone()
                                          
    thoth/thoth/analyzer.py
    ❯❱ python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          187┆ chats = con.execute(chat_query).fetchall()
   
   ❯❯❱ python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          187┆ chats = con.execute(chat_query).fetchall()
   
    ❯❱ python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          219┆ messages = con.execute(message_query).fetchall()
   
   ❯❯❱ python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          219┆ messages = con.execute(message_query).fetchall()
   
    ❯❱ python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          296┆ con.execute(
          297┆     f"SELECT id FROM {msg_table} WHERE chat_id = {chat_id} AND text != ''"
          298┆ ).fetchall()
   
   ❯❯❱ python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          296┆ con.execute(
          297┆     f"SELECT id FROM {msg_table} WHERE chat_id = {chat_id} AND text != ''"
          298┆ ).fetchall()

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘
✅ CI scan completed successfully.
 • Findings: 50 (0 blocking)
 • Rules run: 26125
 • Targets scanned: 62
 • Parsed lines: ~100.0%
 • Scan skipped: 
   ◦ Matching --exclude patterns: 1
   ◦ Files larger than  files 1.0 MB: 9
   ◦ Files matching .semgrepignore patterns: 14
 • Scan was limited to files tracked by git
 • For a detailed list of skipped files and lines, run semgrep with the --verbose flag
CI scan completed successfully.
  View results in Semgrep Cloud Platform:
    https://semgrep.dev/orgs/sevapru-personal-org/findings?repo=local_scan/terrorblade&ref=dev
    https://semgrep.dev/orgs/sevapru-personal-org/supply-chain/vulnerabilities?repo=local_scan/terrorblade&ref=dev
  No blocking findings so exiting with code 0
