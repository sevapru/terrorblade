# Comprehensive CI pipeline for code quality, testing, and security
# Runs formatting checks, linting, type checking, tests across multiple platforms,
# and includes security scanning for a production-ready open source project
name: CI

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master, dev ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "requirements*.in"
        
    - name: Set up virtual environment
      run: |
        uv venv --python ${{ matrix.python-version }}
        echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
        echo "$PWD/.venv/bin" >> $GITHUB_PATH
        
    - name: Compile and install dependencies
      run: |
        uv pip compile requirements.in --output-file requirements.txt
        uv pip compile requirements-dev.in --output-file requirements-dev.txt
        uv pip install -r requirements-dev.txt
        uv pip install -e "."
        
    - name: Cache mypy
      uses: actions/cache@v4
      with:
        path: .mypy_cache
        key: mypy-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          mypy-${{ matrix.python-version }}-
          
    - name: Run formatting checks
      run: |
        echo "::group::Black formatting check"
        black --check --diff .
        echo "::endgroup::"
        
        echo "::group::isort import sorting check"
        isort --check-only --diff .
        echo "::endgroup::"
        
    - name: Run linting
      run: |
        echo "::group::Ruff linting"
        ruff check . --output-format=github
        echo "::endgroup::"
        
        echo "::group::Pylint code quality"
        pylint terrorblade --output-format=colorized || true
        echo "::endgroup::"
        
        echo "::group::MyPy type checking"
        rm -rf .mypy_cache
        mypy terrorblade --exclude "tests/"
        echo "::endgroup::"

  format:
    name: Auto-format Code
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      
    - name: Set up virtual environment
      run: |
        uv venv --python 3.12
        echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
        echo "$PWD/.venv/bin" >> $GITHUB_PATH
        
    - name: Compile and install dependencies
      run: |
        uv pip compile requirements.in --output-file requirements.txt
        uv pip compile requirements-dev.in --output-file requirements-dev.txt
        uv pip install -r requirements-dev.txt
        uv pip install -e "."
        
    - name: Run auto-formatting
      run: |
        make format
        
    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Commit changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "style: auto-format code [skip ci]" || exit 0
        git push

  test:
    name: Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12", "3.13"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "requirements*.in"
        
    - name: Set up virtual environment
      run: |
        uv venv --python ${{ matrix.python-version }}
        
    - name: Compile and install dependencies (Unix)
      if: runner.os != 'Windows'
      run: |
        source .venv/bin/activate
        uv pip compile requirements.in --output-file requirements.txt
        uv pip compile requirements-dev.in --output-file requirements-dev.txt
        uv pip install -r requirements-dev.txt
        uv pip install -e "."
        
    - name: Compile and install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        .venv\Scripts\activate
        uv pip compile requirements.in --output-file requirements.txt
        uv pip compile requirements-dev.in --output-file requirements-dev.txt
        uv pip install -r requirements-dev.txt
        uv pip install -e "."
        
    - name: Run tests (Unix)
      if: runner.os != 'Windows'
      run: |
        source .venv/bin/activate
        python -m pytest tests/ -v --tb=short
        
    - name: Run tests (Windows)
      if: runner.os == 'Windows'  
      run: |
        .venv\Scripts\activate
        python -m pytest tests/ -v --tb=short

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v4 