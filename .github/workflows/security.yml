# Enhanced Security Scanning Workflow
# Comprehensive vulnerability scanning and security analysis
name: Security

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master, dev ]
  schedule:
    # Run daily at 2 AM UTC for dependency vulnerability updates
    - cron: '0 2 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "scripts/requirements*.in"
        
    - name: Create virtual environment
      run: uv venv --python ${{ matrix.python-version || '3.12' }}
        
    - name: Install dependencies
      run: |
        source .venv/bin/activate
        uv pip compile scripts/requirements.in --output-file requirements.txt
        uv pip compile scripts/requirements-dev.in --output-file requirements-dev.txt
        uv pip install -r requirements-dev.txt
        uv pip install bandit[toml] safety pip-audit semgrep
        
    - name: Create reports directory
      run: mkdir -p reports
        
    - name: Run Bandit Security Analysis
      run: |
        source .venv/bin/activate
        mkdir -p reports
        if [ -d "thoth" ]; then
          echo "Scanning terrorblade/ and thoth/ directories"
          bandit -r terrorblade/ thoth/ -f json -o reports/bandit-report.json --quiet || true
          bandit -r terrorblade/ thoth/ --format txt
        else
          echo "Scanning terrorblade/ directory only (thoth not present)"
          bandit -r terrorblade/ -f json -o reports/bandit-report.json --quiet || true
          bandit -r terrorblade/ --format txt
        fi
      continue-on-error: true
        
    - name: Run Safety Dependency Check
      run: |
        source .venv/bin/activate
        uv pip freeze > reports/requirements-freeze.txt
        safety scan --file reports/requirements-freeze.txt --json > reports/safety-report.json || true
        safety scan --file reports/requirements-freeze.txt
      continue-on-error: true
        
    - name: Run pip-audit Vulnerability Scan
      run: |
        source .venv/bin/activate
        pip-audit --format=json --output=reports/pip-audit-report.json --progress-spinner=off || true
        pip-audit --format=cyclonedx-json --output=reports/sbom.json --progress-spinner=off || true
        pip-audit
      continue-on-error: true
        
    - name: Run Semgrep Static Analysis
      run: |
        source .venv/bin/activate
        if [ -d "thoth" ]; then
          echo "Scanning terrorblade/ and thoth/ directories"
          semgrep --config=auto --json --output=reports/semgrep-report.json terrorblade/ thoth/ --quiet || true
          semgrep --config=auto terrorblade/ thoth/
        else
          echo "Scanning terrorblade/ directory only (thoth not present)"
          semgrep --config=auto --json --output=reports/semgrep-report.json terrorblade/ --quiet || true
          semgrep --config=auto terrorblade/
        fi
      continue-on-error: true
        
    - name: Generate Security Summary
      run: |
        echo "# Security Scan Results" > reports/security-summary.md
        echo "Generated: $(date)" >> reports/security-summary.md
        echo "" >> reports/security-summary.md
        
        echo "## Scanned Directories" >> reports/security-summary.md
        echo "- terrorblade/ (core package)" >> reports/security-summary.md
        if [ -d "thoth" ]; then
          echo "- thoth/ (advanced analysis package)" >> reports/security-summary.md
        else
          echo "- thoth/ (not present - optional)" >> reports/security-summary.md
        fi
        echo "" >> reports/security-summary.md
        
        echo "## Tool Results" >> reports/security-summary.md
        echo "- Bandit: $(if [ -f reports/bandit-report.json ]; then echo 'Completed'; else echo 'Failed'; fi)" >> reports/security-summary.md
        echo "- Safety: $(if [ -f reports/safety-report.json ]; then echo 'Completed'; else echo 'Failed'; fi)" >> reports/security-summary.md
        echo "- pip-audit: $(if [ -f reports/pip-audit-report.json ]; then echo 'Completed'; else echo 'Failed'; fi)" >> reports/security-summary.md
        echo "- Semgrep: $(if [ -f reports/semgrep-report.json ]; then echo 'Completed'; else echo 'Failed'; fi)" >> reports/security-summary.md
        
        echo "" >> reports/security-summary.md
        echo "View detailed reports in the artifacts." >> reports/security-summary.md
        
    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: reports/
        retention-days: 30
        
    - name: Comment PR with Security Summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          try {
            const summary = fs.readFileSync('reports/security-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üõ°Ô∏è Security Scan Results\n\n${summary}`
            });
          } catch (error) {
            console.log('Could not read security summary:', error);
          } 